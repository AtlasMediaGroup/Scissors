From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Allink <arclicious@vivaldi.net>
Date: Thu, 21 Apr 2022 13:52:32 +0100
Subject: [PATCH] Limit amount of vehicle collision checks to 3 and discard
 vehicles if they collide with more than 15 other entities


diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index 48b1cddfca671ac8bcb93a1b60518a4ee9e977e2..48a1b0cd306f3c23d7d4049dfa6a2c1be7b5a05f 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -8,6 +8,7 @@ import com.mojang.datafixers.util.Pair;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.TimeUnit; // Scissors
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
 import net.minecraft.Util;
@@ -104,6 +105,7 @@ public abstract class AbstractMinecart extends VehicleEntity {
     private double flyingX = 0.949999988079071D; // Paper - restore vanilla precision
     private double flyingY = 0.949999988079071D; // Paper - restore vanilla precision
     private double flyingZ = 0.949999988079071D; // Paper - restore vanilla precision
+    private long lastLargeCollision = 0L; // Scissors - Add a collision debounce
     public double maxSpeed = 0.4D;
     // CraftBukkit end
 
@@ -384,8 +386,8 @@ public abstract class AbstractMinecart extends VehicleEntity {
             if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && this.getDeltaMovement().horizontalDistanceSqr() > 0.01D) {
                 List<Entity> list = this.level().getEntities((Entity) this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D), EntitySelector.pushableBy(this));
 
-                if (!list.isEmpty()) {
-                    Iterator iterator = list.iterator();
+                if (!list.isEmpty() && (System.currentTimeMillis() - lastLargeCollision) >= TimeUnit.SECONDS.toMillis(5)) { // Scissors - add collision debounce, using TimeUnit for better code readability
+                    Iterator iterator = list.size() <= 15 ? list.iterator() : list.subList(0, 15).iterator(); // Scissors
 
                     while (iterator.hasNext()) {
                         Entity entity = (Entity) iterator.next();
@@ -414,6 +416,14 @@ public abstract class AbstractMinecart extends VehicleEntity {
                             entity.push(this);
                         }
                     }
+
+                    // Scissors start - Add a collision debounce
+                    if (list.size() > 15) {
+                        this.discard();
+                    } else if (list.size() > 3) {
+                        lastLargeCollision = System.currentTimeMillis();
+                    }
+                    // Scissors end
                 }
             } else {
                 Iterator iterator1 = this.level().getEntities(this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D)).iterator();
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index c041c0b81be41cfd128c2f5ba56a5329d50b2efc..7dcbdcb30d264cf76fd975489918509e6e589127 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -5,6 +5,7 @@ import com.google.common.collect.UnmodifiableIterator;
 import java.util.Iterator;
 import java.util.List;
 import java.util.function.IntFunction;
+import java.util.concurrent.TimeUnit; // Scissors
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
 import net.minecraft.core.BlockPos;
@@ -108,6 +109,7 @@ public class Boat extends VehicleEntity implements VariantHolder<Boat.Type> {
     public double unoccupiedDeceleration = -1;
     public boolean landBoats = false;
     // CraftBukkit end
+    private long lastLargeCollision = 0L; // Scissors - Add a collision debounce
 
     public Boat(EntityType<? extends Boat> type, Level world) {
         super(type, world);
@@ -408,9 +410,9 @@ public class Boat extends VehicleEntity implements VariantHolder<Boat.Type> {
         this.checkInsideBlocks();
         List<Entity> list = this.level().getEntities((Entity) this, this.getBoundingBox().inflate(0.20000000298023224D, -0.009999999776482582D, 0.20000000298023224D), EntitySelector.pushableBy(this));
 
-        if (!list.isEmpty()) {
+        if (!list.isEmpty() && (System.currentTimeMillis() - lastLargeCollision) >= TimeUnit.SECONDS.toMillis(5)) { // Scissors - add collision debounce, using TimeUnit for better code readability
             boolean flag = !this.level().isClientSide && !(this.getControllingPassenger() instanceof Player);
-            Iterator iterator = list.iterator();
+            Iterator iterator = list.size() <= 15 ? list.iterator() : list.subList(0, 15).iterator(); // Scissors
 
             while (iterator.hasNext()) {
                 Entity entity = (Entity) iterator.next();
@@ -423,6 +425,14 @@ public class Boat extends VehicleEntity implements VariantHolder<Boat.Type> {
                     }
                 }
             }
+
+            // Scissors start - Add collision debounce
+            if (list.size() > 15) {
+                this.discard();
+            } else if (list.size() > 3) {
+                lastLargeCollision = System.currentTimeMillis();
+            }
+            // Scissors end
         }
 
     }
