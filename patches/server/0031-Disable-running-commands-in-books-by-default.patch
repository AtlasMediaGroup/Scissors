From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Allink <arclicious@vivaldi.net>
Date: Sun, 10 Jul 2022 10:29:03 +0100
Subject: [PATCH] Disable running commands in books by default


diff --git a/src/main/java/net/minecraft/world/item/WrittenBookItem.java b/src/main/java/net/minecraft/world/item/WrittenBookItem.java
index 31911c09fe15753ae32fa39417bdc9e9de552a88..b810a5afcb2343174e37efb7dd8a36b968b07c3a 100644
--- a/src/main/java/net/minecraft/world/item/WrittenBookItem.java
+++ b/src/main/java/net/minecraft/world/item/WrittenBookItem.java
@@ -2,6 +2,7 @@ package net.minecraft.world.item;
 
 import java.util.List;
 import javax.annotation.Nullable;
+import me.totalfreedom.scissors.ScissorsConfig; // Scissors
 import net.minecraft.ChatFormatting;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.core.BlockPos;
@@ -9,8 +10,7 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
-import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.ComponentUtils;
+import net.minecraft.network.chat.*; // Scissors
 import net.minecraft.stats.Stats;
 import net.minecraft.util.StringUtil;
 import net.minecraft.world.InteractionHand;
@@ -161,9 +161,43 @@ public class WrittenBookItem extends Item {
             component2 = Component.literal(text);
         }
 
-        return Component.Serializer.toJson(component2);
+        return Component.Serializer.toJson(!ScissorsConfig.runCommandsInBooks ? sanitize(component2, 0) : component2); // Scissors - Allow server owners to disable run command in books
     }
 
+    // Scissors start - Allow server owners to disable run command in books
+    public static Component sanitize(Component component, int depth)
+    {
+        if (depth > 128)
+        {
+            return Component.nullToEmpty("Sanitization function depth limit exceeded");
+        }
+
+        MutableComponent component2 = component.copy();
+
+        final Style style = component2.getStyle();
+        final ClickEvent clickEvent = style.getClickEvent();
+
+        if (clickEvent != null && clickEvent.getAction().equals(ClickEvent.Action.RUN_COMMAND))
+        {
+            final String clickEventValue = clickEvent.getValue();
+
+            component2 = component2.copy().setStyle(style
+                .withClickEvent(null)
+                .withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, Component.nullToEmpty("Would've " + (clickEventValue.startsWith("/") ? "ran" : "said") + ": " + clickEvent.getValue())))
+            );
+        }
+
+        final List<Component> processedExtra = component2.getSiblings()
+            .stream()
+            .map(comp -> sanitize(comp, depth + 1))
+            .toList();
+        component2.getSiblings().clear();
+        component2.getSiblings().addAll(processedExtra);
+
+        return component2;
+    }
+    // Scissors end
+
     @Override
     public boolean isFoil(ItemStack stack) {
         return true;
